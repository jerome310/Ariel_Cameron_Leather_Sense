{% comment %} View Cart Button Styles {% endcomment %}
<style>
    @media only screen and (max-width: 600px) {

        /* Your CSS rules for screens up to 600px wide go here */
        /* For example: */
        .view-cart {
            margin-top: 10% !important;
        }
    }

    .view-cart {
        position: relative;
        left: 50%;
        transform: translate(-50%, -50%);
        margin-top: 7%;
    }

    .cart-button {
        display: block;
        width: 75%;
        height: 40px;
        line-height: 40px;
        font-size: 18px;
        font-family: sans-serif;
        text-decoration: none;
        color: #333;
        border: 2px solid #333;
        letter-spacing: 2px;
        text-align: center;
        position: relative;
        transition: all .35s;
        border: 1px solid black;
    }

    .cart-button span {
        position: relative;
        z-index: 2;
    }

    .cart-button:after {
        position: absolute;
        content: "";
        top: 0;
        left: 0;
        width: 0;
        height: 100%;
        background: linear-gradient(to right, #feb82b, #2387ff, #e561a1);
        transition: all .35s;
    }

    .cart-button:hover {
        color: #fff;
    }

    .cart-button:hover:after {
        width: 100%;
    }
</style>

<body class="bg-gray-200 flex items-center justify-center h-screen">
    <div id="productFeature"
        class="fixed top-0 right-0 transform translate-x-full transition-transform duration-700 ease-in-out bg-white py-4 px-4 shadow-lg w-3/4 md:w-1/4 h-full">
        <div class="flex justify-between items-center relative px-6">
            <button id="closeButton" class="absolute top-0 right-0">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"
                    class="h-6 w-6">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12">
                    </path>
                </svg>
            </button>
            <h1 class="text-2xl">Cart</h1>
        </div>
        <div class="mt-4 border-b border-solid border-[#CFCFCF]">

        </div>
        <div id="productDiv" class="flex justify-around mt-6">
            <div class="flex flex-row items-center justify-center">
                <a href="{{ 'products/cameron' | url }}">
                    <img src="{{ all_products['cameron'].featured_image.src | img_url: 'large' }}"
                        alt="Cameron Product Image" class="w-24 h-16 object-cover rounded-lg">
                </a>
                <div class="flex flex-col">
                    <p class="text-xl pl-6"><a href="{{ 'products/cameron' | url }}">{{ all_products['cameron'].title }}
                    </p></a>
                    <p id="productPrice" data-price="{{ all_products['cameron'].price }}"
                        class="text-lg text-left pl-6">{{
                        all_products['cameron'].price | money }}</p>
                </div>
            </div>
            <div class="flex flex-col mx-2">
                <div class="flex justify-between my-8">
                    <div class="flex items-center">
                        <button id="decrementButton" type="button"
                            class="relative left-6 text-gray-500 text-2xl">-</button>
                        <input id="quantity" name="quantity" value="1" min="1"
                            class="w-24 py-1 border rounded-md text-center border-black text-xl">
                        <button id="incrementButton" type="button"
                            class="relative right-6 text-gray-500 text-2xl">+</button>
                    </div>
                    <button id="removeProduct" class="text-sm font-medium text-red-500 my-1 pl-4">remove</button>
                </div>
                <h3 id="subtotal" class="text-xl text-left pl-2">Subtotal: {{ all_products['cameron'].price | money }}
                </h3>
            </div>
            <button id="view-cart" class="cart-button !h-12 !text-sm !mx-auto !my-16"><span class="text">View Cart</span></button>
        </div>
        <div id="emptyCart" class="">YOUR CART IS EMPTY</div>
    </div>
</body>

<script>
    // Rendering total amount for the subTotal amount within the product slider

    // Increment Amount
    document.getElementById('incrementButton').addEventListener('click', function () {
        let quantity = parseInt(quantityInput.value);
        quantity += 1;  // Increment the quantity
        quantityInput.value = quantity.toString();  // Update the quantity input field

        let price = parseFloat(document.getElementById('productPrice').dataset.price);
        let totalPrice = (quantity * price) / 100;  // Adjusted for unit discrepancy

        // Format the total price with two decimal places
        let formattedTotalPrice = totalPrice.toFixed(2);

        // Update the subtotal
        document.getElementById('subtotal').innerText = 'Subtotal: $' + formattedTotalPrice;
    });


    // Get the quantity input field
    let quantityInput = document.getElementById('quantity');

    // Add an event listener for the 'keydown' event
    quantityInput.addEventListener('keydown', function (event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            updateCart();
        }
    });

    function updateCart() {
        let quantity = parseInt(quantityInput.value);

        // Ensure quantity does not go below 1
        if (quantity < 1) {
            quantity = 1;
            quantityInput.value = quantity.toString();  // Update the quantity input field
        }

        let price = parseFloat(document.getElementById('productPrice').dataset.price);
        let totalPrice = (quantity * price) / 100;  // Adjusted for unit discrepancy

        // Format the total price with two decimal places
        let formattedTotalPrice = totalPrice.toFixed(2);

        // Update the subtotal
        document.getElementById('subtotal').innerText = 'Subtotal: $' + formattedTotalPrice;
    }

    // Decrement Amount
    document.getElementById('decrementButton').addEventListener('click', function () {
        let quantity = parseInt(quantityInput.value);
        if (quantity > 1) {  // Ensure quantity does not go below 1
            quantity -= 1;  // Decrement the quantity
            quantityInput.value = quantity.toString();  // Update the quantity input field

            let price = parseFloat(document.getElementById('productPrice').dataset.price);
            let totalPrice = (quantity * price) / 100;  // Adjusted for unit discrepancy

            // Format the total price with two decimal places
            let formattedTotalPrice = totalPrice.toFixed(2);

            // Update the subtotal
            document.getElementById('subtotal').innerText = 'Subtotal: $' + formattedTotalPrice;
        }
    });




    // Removing a product and adding a product inside the product slider
    // Displaying the subTotal amount equal to original shopify product item amount
    // Displaying "YOUR CART IS EMPTY" when you click the removeProduct button

    //  WORKING ON displaying a message when the cart is empty
    let removeProduct = document.getElementById('removeProduct');
    let addProduct = document.getElementById('slideButton');
    let productDiv = document.getElementById('productDiv');
    let quantity = document.getElementById('quantity');
    let subtotal = document.getElementById('subtotal');
    let emptyCart = document.getElementById('emptyCart');

    // Get the price of the product
    let price = parseFloat(subtotal.textContent.replace('Subtotal: ', '').replace('$', ''));

    removeProduct.addEventListener('click', () => {
        productDiv.style.display = 'none'; // Hide the div
        emptyCart.style.display = 'flex';
        emptyCart.style.justifyContent = 'center';
        emptyCart.style.alignItems = 'center';
        emptyCart.style.height = '100vh';
        quantity.value = 1; // Set the quantity value to 1
    })

    addProduct.addEventListener('click', () => {
        productDiv.style.display = 'block'; // Show the div
        emptyCart.style.display = 'none'; // Hide the empty cart div
    })

    // adding product to cart page
    document.getElementById('view-cart').addEventListener('click', function () {
        let xhr = new XMLHttpRequest();
        xhr.open('POST', '/cart/add.js', true);
        xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.status === 200) {
                window.location.href = '/cart'; // Redirect to the cart page
            }
        };
        let quantity = document.getElementById('quantity').value;
        let data = {
            id: '{{ all_products["cameron"].variants.first.id }}',
            quantity: quantity
        };
        xhr.send(JSON.stringify(data));
    });
</script>